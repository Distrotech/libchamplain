%%
headers
#include <Python.h>
#include <pygobject.h>
#include <champlain/champlain.h>
#include <clutter/clutter.h>
#include "pychamplain.h"

%%
modulename champlain
%%
import gobject.GObject as PyGObject_Type
import clutter.Actor as PyClutterActor_Type
import clutter.Group as PyClutterGroup_Type
import clutter.Color as PyClutterColor_Type
%%
ignore-glob
        *_get_type
%%
ignore
	champlain_zoom_level_set_actor
	// deprecated methods
	champlain_cache_get_default
	champlain_map_source_factory_get_default
	champlain_map_source_factory_get_list
	champlain_network_map_source_fill_tile

%%
override champlain_map_source_factory_dup_list kwargs
static PyObject *
_wrap_champlain_map_source_factory_dup_list(PyGObject *self) {
	GSList *iter, *list;
	PyObject *ret;

	list = champlain_map_source_factory_dup_list(CHAMPLAIN_MAP_SOURCE_FACTORY(self->obj));
	
	ret = PyList_New(0);
	for(iter = list; iter != NULL; iter = iter->next) {
		PyObject *item = PyDict_New();
		ChamplainMapSourceDesc *desc = (ChamplainMapSourceDesc *) iter->data;
		PyDict_SetItemString(item, "id", PyString_FromString(desc->id));
		PyDict_SetItemString(item, "name", PyString_FromString(desc->name));
		PyDict_SetItemString(item, "license", PyString_FromString(desc->license));
		PyDict_SetItemString(item, "license_uri", PyString_FromString(desc->license_uri));
		PyDict_SetItemString(item, "min_zoom_level", PyInt_FromLong(desc->min_zoom_level));
		PyDict_SetItemString(item, "max_zoom_level", PyInt_FromLong(desc->max_zoom_level));
		PyList_Append(ret, item);
		Py_DECREF(item);
	}

	g_slist_free(list);

	return ret;
}
%%
