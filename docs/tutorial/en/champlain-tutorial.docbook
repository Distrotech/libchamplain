<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "/usr/share/xml/docbook/schema/dtd/4.4/docbookx.dtd" [

	<!ELEMENT xi:include (xi:fallback?) >
	<!ATTLIST xi:include
		xmlns:xi   CDATA       #FIXED    "http://www.w3.org/2001/XInclude"
		href       CDATA       #IMPLIED
		parse      (xml|text)  "text"
		xpointer   CDATA       #IMPLIED
		encoding   CDATA       #IMPLIED 
		accept     CDATA       #IMPLIED
		accept-language CDATA  #IMPLIED >

	<!ELEMENT xi:fallback ANY>
	<!ATTLIST xi:fallback
		xmlns:xi   CDATA   #FIXED   "http://www.w3.org/2001/XInclude" >

	<!ENTITY % local.para.char.mix "| xi:include">

	<!ENTITY license SYSTEM "license.docbook">
	<!ENTITY fdl-license SYSTEM "fdl-license">

]> 
 
<book id="python_champlain" lang="en">

	<bookinfo>
		<title>Conquering The World With 
			<phrase condition="python">Python</phrase>
			<phrase condition="perl">Perl</phrase>
			<phrase condition="c">C</phrase>
			And Libchamplain
		</title>

		<author>
			<firstname>Michael</firstname>
		      	<surname>Sheldon</surname>
		</author>

		<date>2009-03-22</date>

		<releaseinfo>0.10.1</releaseinfo>

		<abstract>
			<para>This is a step-by-step tutorial which will introduce champlain concepts and how to make use of them from within Python. It is released under the <ulink url="http://www.gnu.org/copyleft/fdl.html">GNU Free Documentation License</ulink> a copy of which can be found in <link linkend="fdl-license">Appendix A.</link></para>
		</abstract>

	</bookinfo>

	<chapter id="introduction">
		<title>Introduction</title>
 
		<para>This tutorial will try introduce most concepts within in champlain and explain how they can be used from within Python. The target audience for this tutorial is programmers with past Python and GTK experience, no experience of either champlain or clutter will be assumed. Chapter 2 will introduce a number of concepts from champlain individually. Chapter 3 will then provide a detailed account of the creation of a simple game from scratch using champlain. Chapter 4 will give an example of creating a plugin for an existing application to add mapping capabilities.</para>

		<sect1>
			<title>Examples</title>

			<para>Each chapter contains a number of examples, the source code for these can be downloaded from the <ulink url="http://www.mikeasoft.com/champy/">Conquering The World With Python And Champlain website</ulink>.</para>
		</sect1>
 
	</chapter>

	<chapter id="concepts">
		<title>Concepts</title>

		<para>This chapter introduces many of the fundamental concepts of champlain in very simple standalone programs. All of the examples will build upon basics outlined in the <link linkend="initialisation">initialisation</link> section, apart from this the examples can be read in any order and do not depend on one another. The techniques described here will later be used in a more complicated setting in <link linkend="game">chapter 3</link> and <link linkend="plugin">chapter 4</link>, so it is advisable to acquaint yourself with most of them prior to moving on to the later chapters.</para>

		<sect1 id="initialisation">
			<title>Initialisation</title>

			<para>This section will introduce the minimal steps required to get a champlain based application off the ground. The final result will be a window displaying tiles from the <ulink url="http://www.openstreetmap.org">Open Street Map project</ulink>, as pictured below. The user will be able to interact with this map by dragging the map to move around and double clicking to zoom in.</para>

			<figure>
				<title>Initialisation Screenshot</title>
				<screenshot>
					<graphic fileref="../../images/chapter2/01-initialisation.png" scale="83" />
				</screenshot>
			</figure>

			<sect2>
				<title>Required Modules</title>

				<example>
					<title>Modules</title>
					<programlisting>
import gobject, clutter, champlain
					</programlisting>
				</example>

				<para>In addition to the champlain python module, the gobject and clutter modules are also required. The gobject module will only be used briefly as part of the initialisation stage, since champlain is a gobject based library <function>gobject.threads_init()</function> must be called before it can be used. The clutter module on the other hand plays a much more direct role in champlain programs and relevant clutter functions will be covered in detail throughout this tutorial.</para>

				<para>Clutter is a toolkit for creating visually impressive graphical user interfaces on top of OpenGL or OpenGL|ES making clutter based application suitable for use on both the desktop and in embedded environments. Further information about clutter can be found at the <ulink url="http://www.clutter-project.org">clutter website</ulink>, this tutorial will only cover the aspects of clutter which are needed for common champlain usage, for a more in-depth look at clutter it is recommended that you read the official <ulink url="http://www.clutter-project.org/docs">clutter documentation</ulink>.</para> 
			</sect2>

			<sect2>
				<title>Module Initialisation</title>

				<example>
					<title>Module Initialisation</title>
					<programlisting>
gobject.threads_init()
clutter.init()
					</programlisting>
				</example>

				<para>As mentioned in the previous section <function>gobject.threads_init()</function> must be called before making use of any champlain methods, in addition to this it is necessary to also run the <function>clutter.init()</function> function to initialise clutter.</para>
			</sect2>

			<sect2>
				<title>The Clutter Stage</title>

				<example>
					<title>Clutter Stage</title>
					<programlisting>
stage = clutter.stage_get_default()
stage.set_size(800, 600)
					</programlisting>
				</example>

				<para>This retrieves clutter's default <firstterm>stage</firstterm>, this can be thought of as the canvas upon which all drawing operations will take place. Using clutter in this manner will provide a standalone window containing just the stage. The size of the stage is then set to 800x600, which will result in the display window also being 800x600. At this point the window will not yet be visible to the user.</para>

				<tip>
					<itemizedlist>
						<title>Clutter Terms</title>
						<listitem><para>Stage - The canvas upon which actors are drawn.</para></listitem>
						<listitem><para>Actor - A visual element that can be displayed on the stage. This could be anything from a position marker to the champlain map itself.</para></listitem>
					</itemizedlist>
				</tip>
			</sect2>

			<sect2>
				<title>The Champlain View</title>
				
				<example>
					<title>Champlain View</title>
					<programlisting>
view = champlain.View()
view.set_size(800, 600)
stage.add(view)
					</programlisting>
				</example>

				<para>A champlain <firstterm>view</firstterm> is a type of clutter <firstterm>actor</firstterm> which displays the map itself, by default this will be tile images from the <ulink url="http://www.openstreetmap.org">Open Street Map project</ulink> retrieved on-demand over the internet. The map displayed in a view can be changed by assigning a new <firstterm>map source</firstterm>, as discussed later in the <link linkend="map-sources">map sources section</link>. The view size is then set to match the stage size of 800x600 and finally the view is added to the stage, ready to be displayed when the stage is made visible.</para>
			</sect2>

			<sect2>
				<title>Displaying The Stage</title>

				<example>
					<title>Displaying The Stage</title>
					<programlisting>
stage.show()
clutter.main()
					</programlisting>
				</example>

				<para>Finally we make the window visible by calling <function>stage.show()</function> and start the clutter <firstterm>main loop</firstterm> by calling <function>clutter.main()</function>. The clutter main loop handles all display updates, input and event dispatching. No code after the <function>clutter.main()</function> will execute until the main loop has stopped running. This is the equivalent of the <function>gtk.main()</function> function in GTK applications, as both clutter and GTK are gobject based it's not necessary to call <function>clutter.main()</function> in a GTK program, as the GTK main loop will handle everything.</para>
			</sect2>

			<sect2>
				<title>Full Listing</title>
				<example>
					<title>Initialisation</title>
					<programlisting condition="python"><xi:include href="../examples/python/chapter2/01-initialisation.py"/></programlisting>
				</example>
			</sect2>
		</sect1>

		<sect1>
			<title>Views</title>

			<para></para>

			<sect2>
				<title>Properties</title>

				<para></para>
			</sect2>

			<sect2>
				<title>Moving Around</title>

				<para></para>
			</sect2>
		</sect1>

		<sect1>
			<title>Layers</title>

			<para></para>
		</sect1>

		<sect1>
			<title>Markers</title>
			
			<para></para>

			<sect2>
				<title>Label Markers</title>

				<para></para>
			</sect2>

			<sect2>
				<title>Image Markers</title>

				<para></para>
			</sect2>

			<sect2>
				<title>Custom Markers</title>

				<para></para>
			</sect2>

			<sect2>
				<title>Animated Markers</title>

				<para></para>
			</sect2>
		</sect1>

		<sect1 id="map-sources">
			<title>Map Sources</title>
			<para></para>
		</sect1>

		<sect1>
			<title>Embedding Within GTK</title>
			<para></para>
		</sect1>

		<sect1>
			<title>Proxy Support</title>
			<para></para>
		</sect1>
	</chapter>

	<chapter id="game">
		<title>Starting From Scratch</title>
		
		<para>This chapter will cover the creation of a simple game based around champlain's mapping and marker capabilities.</para>
	</chapter>

	<chapter id="plugin">
		<title>Writing A Plugin</title>

		<para>In this chapter a plugin is written for an existing application to add mapping facilities.</para>
	</chapter>


	&license;
</book>

